/* automatically generated by rust-bindgen 0.59.2 */

pub type libmykotlin_KBoolean = bool;
pub type libmykotlin_KChar = ::std::os::raw::c_ushort;
pub type libmykotlin_KByte = ::std::os::raw::c_schar;
pub type libmykotlin_KShort = ::std::os::raw::c_short;
pub type libmykotlin_KInt = ::std::os::raw::c_int;
pub type libmykotlin_KLong = ::std::os::raw::c_longlong;
pub type libmykotlin_KUByte = ::std::os::raw::c_uchar;
pub type libmykotlin_KUShort = ::std::os::raw::c_ushort;
pub type libmykotlin_KUInt = ::std::os::raw::c_uint;
pub type libmykotlin_KULong = ::std::os::raw::c_ulonglong;
pub type libmykotlin_KFloat = f32;
pub type libmykotlin_KDouble = f64;
pub type libmykotlin_KVector128 = [f32; 4usize];
pub type libmykotlin_KNativePtr = *mut ::std::os::raw::c_void;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_KType {
    _unused: [u8; 0],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_kref_kotlin_Byte {
    pub pinned: libmykotlin_KNativePtr,
}

#[test]
fn bindgen_test_layout_libmykotlin_kref_kotlin_Byte() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_kref_kotlin_Byte>(),
        8usize,
        concat!("Size of: ", stringify!(libmykotlin_kref_kotlin_Byte))
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_kref_kotlin_Byte>(),
        8usize,
        concat!("Alignment of ", stringify!(libmykotlin_kref_kotlin_Byte))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_kref_kotlin_Byte>())).pinned as *const _ as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_kref_kotlin_Byte),
        "::",
        stringify!(pinned)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_kref_kotlin_Short {
    pub pinned: libmykotlin_KNativePtr,
}

#[test]
fn bindgen_test_layout_libmykotlin_kref_kotlin_Short() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_kref_kotlin_Short>(),
        8usize,
        concat!("Size of: ", stringify!(libmykotlin_kref_kotlin_Short))
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_kref_kotlin_Short>(),
        8usize,
        concat!("Alignment of ", stringify!(libmykotlin_kref_kotlin_Short))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_kref_kotlin_Short>())).pinned as *const _ as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_kref_kotlin_Short),
        "::",
        stringify!(pinned)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_kref_kotlin_Int {
    pub pinned: libmykotlin_KNativePtr,
}

#[test]
fn bindgen_test_layout_libmykotlin_kref_kotlin_Int() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_kref_kotlin_Int>(),
        8usize,
        concat!("Size of: ", stringify!(libmykotlin_kref_kotlin_Int))
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_kref_kotlin_Int>(),
        8usize,
        concat!("Alignment of ", stringify!(libmykotlin_kref_kotlin_Int))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_kref_kotlin_Int>())).pinned as *const _ as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_kref_kotlin_Int),
        "::",
        stringify!(pinned)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_kref_kotlin_Long {
    pub pinned: libmykotlin_KNativePtr,
}

#[test]
fn bindgen_test_layout_libmykotlin_kref_kotlin_Long() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_kref_kotlin_Long>(),
        8usize,
        concat!("Size of: ", stringify!(libmykotlin_kref_kotlin_Long))
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_kref_kotlin_Long>(),
        8usize,
        concat!("Alignment of ", stringify!(libmykotlin_kref_kotlin_Long))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_kref_kotlin_Long>())).pinned as *const _ as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_kref_kotlin_Long),
        "::",
        stringify!(pinned)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_kref_kotlin_Float {
    pub pinned: libmykotlin_KNativePtr,
}

#[test]
fn bindgen_test_layout_libmykotlin_kref_kotlin_Float() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_kref_kotlin_Float>(),
        8usize,
        concat!("Size of: ", stringify!(libmykotlin_kref_kotlin_Float))
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_kref_kotlin_Float>(),
        8usize,
        concat!("Alignment of ", stringify!(libmykotlin_kref_kotlin_Float))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_kref_kotlin_Float>())).pinned as *const _ as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_kref_kotlin_Float),
        "::",
        stringify!(pinned)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_kref_kotlin_Double {
    pub pinned: libmykotlin_KNativePtr,
}

#[test]
fn bindgen_test_layout_libmykotlin_kref_kotlin_Double() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_kref_kotlin_Double>(),
        8usize,
        concat!("Size of: ", stringify!(libmykotlin_kref_kotlin_Double))
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_kref_kotlin_Double>(),
        8usize,
        concat!("Alignment of ", stringify!(libmykotlin_kref_kotlin_Double))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_kref_kotlin_Double>())).pinned as *const _ as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_kref_kotlin_Double),
        "::",
        stringify!(pinned)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_kref_kotlin_Char {
    pub pinned: libmykotlin_KNativePtr,
}

#[test]
fn bindgen_test_layout_libmykotlin_kref_kotlin_Char() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_kref_kotlin_Char>(),
        8usize,
        concat!("Size of: ", stringify!(libmykotlin_kref_kotlin_Char))
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_kref_kotlin_Char>(),
        8usize,
        concat!("Alignment of ", stringify!(libmykotlin_kref_kotlin_Char))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_kref_kotlin_Char>())).pinned as *const _ as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_kref_kotlin_Char),
        "::",
        stringify!(pinned)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_kref_kotlin_Boolean {
    pub pinned: libmykotlin_KNativePtr,
}

#[test]
fn bindgen_test_layout_libmykotlin_kref_kotlin_Boolean() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_kref_kotlin_Boolean>(),
        8usize,
        concat!("Size of: ", stringify!(libmykotlin_kref_kotlin_Boolean))
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_kref_kotlin_Boolean>(),
        8usize,
        concat!("Alignment of ", stringify!(libmykotlin_kref_kotlin_Boolean))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_kref_kotlin_Boolean>())).pinned as *const _ as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_kref_kotlin_Boolean),
        "::",
        stringify!(pinned)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_kref_kotlin_Unit {
    pub pinned: libmykotlin_KNativePtr,
}

#[test]
fn bindgen_test_layout_libmykotlin_kref_kotlin_Unit() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_kref_kotlin_Unit>(),
        8usize,
        concat!("Size of: ", stringify!(libmykotlin_kref_kotlin_Unit))
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_kref_kotlin_Unit>(),
        8usize,
        concat!("Alignment of ", stringify!(libmykotlin_kref_kotlin_Unit))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_kref_kotlin_Unit>())).pinned as *const _ as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_kref_kotlin_Unit),
        "::",
        stringify!(pinned)
        )
    );
}

extern "C" {
    pub fn greeting_from_kotlin() -> *const ::std::os::raw::c_char;
}

extern "C" {
    pub fn kotlin_main();
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_ExportedSymbols {
    pub DisposeStablePointer:
    ::std::option::Option<unsafe extern "C" fn(ptr: libmykotlin_KNativePtr)>,
    pub DisposeString:
    ::std::option::Option<unsafe extern "C" fn(string: *const ::std::os::raw::c_char)>,
    pub IsInstance: ::std::option::Option<
        unsafe extern "C" fn(
            ref_: libmykotlin_KNativePtr,
            type_: *const libmykotlin_KType,
        ) -> libmykotlin_KBoolean,
    >,
    pub createNullableByte: ::std::option::Option<
        unsafe extern "C" fn(arg1: libmykotlin_KByte) -> libmykotlin_kref_kotlin_Byte,
    >,
    pub createNullableShort: ::std::option::Option<
        unsafe extern "C" fn(arg1: libmykotlin_KShort) -> libmykotlin_kref_kotlin_Short,
    >,
    pub createNullableInt: ::std::option::Option<
        unsafe extern "C" fn(arg1: libmykotlin_KInt) -> libmykotlin_kref_kotlin_Int,
    >,
    pub createNullableLong: ::std::option::Option<
        unsafe extern "C" fn(arg1: libmykotlin_KLong) -> libmykotlin_kref_kotlin_Long,
    >,
    pub createNullableFloat: ::std::option::Option<
        unsafe extern "C" fn(arg1: libmykotlin_KFloat) -> libmykotlin_kref_kotlin_Float,
    >,
    pub createNullableDouble: ::std::option::Option<
        unsafe extern "C" fn(arg1: libmykotlin_KDouble) -> libmykotlin_kref_kotlin_Double,
    >,
    pub createNullableChar: ::std::option::Option<
        unsafe extern "C" fn(arg1: libmykotlin_KChar) -> libmykotlin_kref_kotlin_Char,
    >,
    pub createNullableBoolean: ::std::option::Option<
        unsafe extern "C" fn(arg1: libmykotlin_KBoolean) -> libmykotlin_kref_kotlin_Boolean,
    >,
    pub createNullableUnit:
    ::std::option::Option<unsafe extern "C" fn() -> libmykotlin_kref_kotlin_Unit>,
    pub kotlin: libmykotlin_ExportedSymbols__bindgen_ty_1,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_ExportedSymbols__bindgen_ty_1 {
    pub root: libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1 {
    pub main: libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub gretting_from_kotlin:
    ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub main: ::std::option::Option<unsafe extern "C" fn()>,
}

#[test]
fn bindgen_test_layout_libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
        "Size of: ",
        stringify!(libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
            >()))
                .gretting_from_kotlin as *const _ as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(gretting_from_kotlin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
            >()))
                .main as *const _ as usize
        },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(main)
        )
    );
}

#[test]
fn bindgen_test_layout_libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
        "Size of: ",
        stringify!(libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1>())).main
                as *const _ as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(main)
        )
    );
}

#[test]
fn bindgen_test_layout_libmykotlin_ExportedSymbols__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_ExportedSymbols__bindgen_ty_1>(),
        16usize,
        concat!(
        "Size of: ",
        stringify!(libmykotlin_ExportedSymbols__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_ExportedSymbols__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(libmykotlin_ExportedSymbols__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols__bindgen_ty_1>())).root as *const _
                as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols__bindgen_ty_1),
        "::",
        stringify!(root)
        )
    );
}

#[test]
fn bindgen_test_layout_libmykotlin_ExportedSymbols() {
    assert_eq!(
        ::std::mem::size_of::<libmykotlin_ExportedSymbols>(),
        112usize,
        concat!("Size of: ", stringify!(libmykotlin_ExportedSymbols))
    );
    assert_eq!(
        ::std::mem::align_of::<libmykotlin_ExportedSymbols>(),
        8usize,
        concat!("Alignment of ", stringify!(libmykotlin_ExportedSymbols))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).DisposeStablePointer as *const _
                as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(DisposeStablePointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).DisposeString as *const _
                as usize
        },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(DisposeString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).IsInstance as *const _ as usize
        },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(IsInstance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).createNullableByte as *const _
                as usize
        },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(createNullableByte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).createNullableShort as *const _
                as usize
        },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(createNullableShort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).createNullableInt as *const _
                as usize
        },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(createNullableInt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).createNullableLong as *const _
                as usize
        },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(createNullableLong)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).createNullableFloat as *const _
                as usize
        },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(createNullableFloat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).createNullableDouble as *const _
                as usize
        },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(createNullableDouble)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).createNullableChar as *const _
                as usize
        },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(createNullableChar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).createNullableBoolean
                as *const _ as usize
        },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(createNullableBoolean)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).createNullableUnit as *const _
                as usize
        },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(createNullableUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libmykotlin_ExportedSymbols>())).kotlin as *const _ as usize
        },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(libmykotlin_ExportedSymbols),
        "::",
        stringify!(kotlin)
        )
    );
}

extern "C" {
    pub fn libmykotlin_symbols() -> *mut libmykotlin_ExportedSymbols;
}
